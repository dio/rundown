// Copyright 2022 Dhi Aurrahman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: settings/v1/settings.proto

package settingsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is the proto representation of https://github.com/envoyproxy/ratelimit/blob/main/src/settings/settings.go.
// This is manually syncronized. The default values, are provided through: ratelimit/settings.go.
// TODO(dio): Parse https://github.com/envoyproxy/ratelimit/blob/main/src/settings/settings.go and
// generate this message.
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default: "0.0.0.0".
	Host *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Default: 8080.
	Port *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// Default: "0.0.0.0".
	GrpcHost *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=grpc_host,json=grpcHost,proto3" json:"grpc_host,omitempty"`
	// Default: 8081.
	GrpcPort *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	// Default: "0.0.0.0".
	DebugHost *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=debug_host,json=debugHost,proto3" json:"debug_host,omitempty"`
	// Default: 6070.
	DebugPort *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=debug_port,json=debugPort,proto3" json:"debug_port,omitempty"`
	// GrpcMaxConnectionAge is a duration for the maximum amount of time a connection may exist before
	// it will be closed by sending a GoAway. A random jitter of +/-10% will be added to
	// MaxConnectionAge to spread out connection storms.
	// Default: 24h.
	GrpcMaxConnectionAge *durationpb.Duration `protobuf:"bytes,7,opt,name=grpc_max_connection_age,json=grpcMaxConnectionAge,proto3" json:"grpc_max_connection_age,omitempty"`
	// GrpcMaxConnectionAgeGrace is an additive period after MaxConnectionAge after which the
	// connection will be forcibly closed.
	// Default: 1h.
	GrpcMaxConnectionAgeGrace *durationpb.Duration `protobuf:"bytes,8,opt,name=grpc_max_connection_age_grace,json=grpcMaxConnectionAgeGrace,proto3" json:"grpc_max_connection_age_grace,omitempty"`
	// Default: "WARN".
	LogLevel *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// Default: "text".
	LogFormat *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=log_format,json=logFormat,proto3" json:"log_format,omitempty"`
	// Default: true.
	UseStatsd *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=use_statsd,json=useStatsd,proto3" json:"use_statsd,omitempty"`
	// Default: "localhost".
	StatsdHost *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=statsd_host,json=statsdHost,proto3" json:"statsd_host,omitempty"`
	// Default: 8125.
	StatsdPort *wrapperspb.UInt32Value `protobuf:"bytes,13,opt,name=statsd_port,json=statsdPort,proto3" json:"statsd_port,omitempty"`
	ExtraTags  map[string]string       `protobuf:"bytes,14,rep,name=extra_tags,json=extraTags,proto3" json:"extra_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Default: "/srv/runtime_data/current".
	RuntimePath         *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=runtime_path,json=runtimePath,proto3" json:"runtime_path,omitempty"`
	RuntimeSubdirectory *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=runtime_subdirectory,json=runtimeSubdirectory,proto3" json:"runtime_subdirectory,omitempty"`
	// Default: false.
	RuntimeIgnoreDotFiles *wrapperspb.BoolValue `protobuf:"bytes,17,opt,name=runtime_ignore_dot_files,json=runtimeIgnoreDotFiles,proto3" json:"runtime_ignore_dot_files,omitempty"`
	// Default: true.
	RuntimeWatchRoot *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=runtime_watch_root,json=runtimeWatchRoot,proto3" json:"runtime_watch_root,omitempty"`
	// Default: 300.
	ExpirationJitterMaxSeconds *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=expiration_jitter_max_seconds,json=expirationJitterMaxSeconds,proto3" json:"expiration_jitter_max_seconds,omitempty"`
	// Default: 0.
	LocalCacheSizeInBytes *wrapperspb.UInt32Value `protobuf:"bytes,20,opt,name=local_cache_size_in_bytes,json=localCacheSizeInBytes,proto3" json:"local_cache_size_in_bytes,omitempty"`
	// Default: 0.8
	NearLimitRatio *wrapperspb.FloatValue  `protobuf:"bytes,21,opt,name=near_limit_ratio,json=nearLimitRatio,proto3" json:"near_limit_ratio,omitempty"`
	CacheKeyPrefix *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=cache_key_prefix,json=cacheKeyPrefix,proto3" json:"cache_key_prefix,omitempty"`
	// Default: "redis".
	BackendType *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=backend_type,json=backendType,proto3" json:"backend_type,omitempty"`
	// Settings for optional returning of custom headers
	// Default: false.
	RateLimitResponseHeadersEnabled *wrapperspb.BoolValue `protobuf:"bytes,24,opt,name=rate_limit_response_headers_enabled,json=rateLimitResponseHeadersEnabled,proto3" json:"rate_limit_response_headers_enabled,omitempty"`
	// Hold the current limit.
	// Default: "Ratelimit-Limit".
	HeaderRatelimitLimit *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=header_ratelimit_limit,json=headerRatelimitLimit,proto3" json:"header_ratelimit_limit,omitempty"`
	// Hold the remaining count.
	// Default: "Ratelimit-Remaining".
	HeaderRatelimitRemaining *wrapperspb.StringValue `protobuf:"bytes,26,opt,name=header_ratelimit_remaining,json=headerRatelimitRemaining,proto3" json:"header_ratelimit_remaining,omitempty"`
	// Hold the remaining second.
	// Default: RateLimit-Reset
	HeaderRatelimitReset *wrapperspb.StringValue `protobuf:"bytes,27,opt,name=header_ratelimit_reset,json=headerRatelimitReset,proto3" json:"header_ratelimit_reset,omitempty"`
	// Default: "unix".
	RedisSocketType *wrapperspb.StringValue `protobuf:"bytes,28,opt,name=redis_socket_type,json=redisSocketType,proto3" json:"redis_socket_type,omitempty"`
	// Default: "SINGLE".
	RedisType *wrapperspb.StringValue `protobuf:"bytes,29,opt,name=redis_type,json=redisType,proto3" json:"redis_type,omitempty"`
	// Default: "/var/run/nutcracker/ratelimit.sock".
	RedisUrl *wrapperspb.StringValue `protobuf:"bytes,30,opt,name=redis_url,json=redisUrl,proto3" json:"redis_url,omitempty"`
	// Default: 10.
	RedisPoolSize *wrapperspb.UInt32Value `protobuf:"bytes,31,opt,name=redis_pool_size,json=redisPoolSize,proto3" json:"redis_pool_size,omitempty"`
	RedisAuth     *wrapperspb.StringValue `protobuf:"bytes,32,opt,name=redis_auth,json=redisAuth,proto3" json:"redis_auth,omitempty"`
	// Default: false.
	RedisTls *wrapperspb.BoolValue `protobuf:"bytes,33,opt,name=redis_tls,json=redisTls,proto3" json:"redis_tls,omitempty"`
	// RedisPipelineWindow sets the duration after which internal pipelines will be flushed.
	// If window is zero then implicit pipelining will be disabled. Radix use 150us for the
	// default value, see https://github.com/mediocregopher/radix/blob/v3.5.1/pool.go#L278.
	// Default: 0.
	RedisPipelineWindow *durationpb.Duration `protobuf:"bytes,34,opt,name=redis_pipeline_window,json=redisPipelineWindow,proto3" json:"redis_pipeline_window,omitempty"`
	// RedisPipelineLimit sets maximum number of commands that can be pipelined before flushing.
	// If limit is zero then no limit will be used and pipelines will only be limited by the specified
	// time window.
	// Default: 0.
	RedisPipelineLimit *wrapperspb.UInt32Value `protobuf:"bytes,35,opt,name=redis_pipeline_limit,json=redisPipelineLimit,proto3" json:"redis_pipeline_limit,omitempty"`
	// Default: false.
	RedisPerSecond *wrapperspb.BoolValue `protobuf:"bytes,36,opt,name=redis_per_second,json=redisPerSecond,proto3" json:"redis_per_second,omitempty"`
	// Default: "unix".
	RedisPerSecondSocketType *wrapperspb.StringValue `protobuf:"bytes,37,opt,name=redis_per_second_socket_type,json=redisPerSecondSocketType,proto3" json:"redis_per_second_socket_type,omitempty"`
	// Default: "SINGLE".
	RedisPerSecondType *wrapperspb.StringValue `protobuf:"bytes,38,opt,name=redis_per_second_type,json=redisPerSecondType,proto3" json:"redis_per_second_type,omitempty"`
	// Default: "/var/run/nutcracker/ratelimitpersecond.sock".
	RedisPerSecondUrl *wrapperspb.StringValue `protobuf:"bytes,39,opt,name=redis_per_second_url,json=redisPerSecondUrl,proto3" json:"redis_per_second_url,omitempty"`
	// Default: 10.
	RedisPerSecondPoolSize *wrapperspb.UInt32Value `protobuf:"bytes,40,opt,name=redis_per_second_pool_size,json=redisPerSecondPoolSize,proto3" json:"redis_per_second_pool_size,omitempty"`
	RedisPerSecondAuth     *wrapperspb.StringValue `protobuf:"bytes,41,opt,name=redis_per_second_auth,json=redisPerSecondAuth,proto3" json:"redis_per_second_auth,omitempty"`
	// Default: false.
	RedisPerSecondTls *wrapperspb.BoolValue `protobuf:"bytes,42,opt,name=redis_per_second_tls,json=redisPerSecondTls,proto3" json:"redis_per_second_tls,omitempty"`
	// RedisPerSecondPipelineWindow sets the duration after which internal pipelines will be flushed
	// for per second redis. See comments of RedisPipelineWindow for details.
	// Default: 0.
	RedisPerSecondPipelineWindow *durationpb.Duration `protobuf:"bytes,43,opt,name=redis_per_second_pipeline_window,json=redisPerSecondPipelineWindow,proto3" json:"redis_per_second_pipeline_window,omitempty"`
	// RedisPerSecondPipelineLimit sets maximum number of commands that can be pipelined before
	// flushing for per second redis. See comments of RedisPipelineLimit for details.
	// Default: 0.
	RedisPerSecondPipelineLimit *wrapperspb.UInt32Value `protobuf:"bytes,44,opt,name=redis_per_second_pipeline_limit,json=redisPerSecondPipelineLimit,proto3" json:"redis_per_second_pipeline_limit,omitempty"`
	// Enable healthcheck to check Redis Connection. If there is no active connection, healthcheck
	// failed.
	// Default: false.
	RedisHealthCheckActiveConnection *wrapperspb.BoolValue `protobuf:"bytes,45,opt,name=redis_health_check_active_connection,json=redisHealthCheckActiveConnection,proto3" json:"redis_health_check_active_connection,omitempty"`
	MemcacheHostPort                 []string              `protobuf:"bytes,46,rep,name=memcache_host_port,json=memcacheHostPort,proto3" json:"memcache_host_port,omitempty"`
	// MemcacheMaxIdleConns sets the maximum number of idle TCP connections per memcached node. The
	// default is 2 as that is the default of the underlying library. This is the maximum number of
	// connections to memcache kept idle in pool, if a connection is needed but none are idle a new
	// connection is opened, used and closed and can be left in a time-wait state which can result in
	// high CPU usage.
	// Default: 2.
	MemcacheMaxIdleConns *wrapperspb.UInt32Value `protobuf:"bytes,47,opt,name=memcache_max_idle_conns,json=memcacheMaxIdleConns,proto3" json:"memcache_max_idle_conns,omitempty"`
	MemcacheSrv          *wrapperspb.StringValue `protobuf:"bytes,48,opt,name=memcache_srv,json=memcacheSrv,proto3" json:"memcache_srv,omitempty"`
	// Default: 0.
	MemcacheSrvRefresh *durationpb.Duration `protobuf:"bytes,49,opt,name=memcache_srv_refresh,json=memcacheSrvRefresh,proto3" json:"memcache_srv_refresh,omitempty"`
	// Should the ratelimiting be running in Global shadow-mode, ie. never report a ratelimit status,
	// unless a rate was provided from envoy as an override.
	// Default: false.
	GlobalShadownMode *wrapperspb.BoolValue `protobuf:"bytes,50,opt,name=global_shadown_mode,json=globalShadownMode,proto3" json:"global_shadown_mode,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_settings_v1_settings_proto_rawDescGZIP(), []int{0}
}

func (x *Settings) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Settings) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Settings) GetGrpcHost() *wrapperspb.StringValue {
	if x != nil {
		return x.GrpcHost
	}
	return nil
}

func (x *Settings) GetGrpcPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.GrpcPort
	}
	return nil
}

func (x *Settings) GetDebugHost() *wrapperspb.StringValue {
	if x != nil {
		return x.DebugHost
	}
	return nil
}

func (x *Settings) GetDebugPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DebugPort
	}
	return nil
}

func (x *Settings) GetGrpcMaxConnectionAge() *durationpb.Duration {
	if x != nil {
		return x.GrpcMaxConnectionAge
	}
	return nil
}

func (x *Settings) GetGrpcMaxConnectionAgeGrace() *durationpb.Duration {
	if x != nil {
		return x.GrpcMaxConnectionAgeGrace
	}
	return nil
}

func (x *Settings) GetLogLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.LogLevel
	}
	return nil
}

func (x *Settings) GetLogFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.LogFormat
	}
	return nil
}

func (x *Settings) GetUseStatsd() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseStatsd
	}
	return nil
}

func (x *Settings) GetStatsdHost() *wrapperspb.StringValue {
	if x != nil {
		return x.StatsdHost
	}
	return nil
}

func (x *Settings) GetStatsdPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.StatsdPort
	}
	return nil
}

func (x *Settings) GetExtraTags() map[string]string {
	if x != nil {
		return x.ExtraTags
	}
	return nil
}

func (x *Settings) GetRuntimePath() *wrapperspb.StringValue {
	if x != nil {
		return x.RuntimePath
	}
	return nil
}

func (x *Settings) GetRuntimeSubdirectory() *wrapperspb.StringValue {
	if x != nil {
		return x.RuntimeSubdirectory
	}
	return nil
}

func (x *Settings) GetRuntimeIgnoreDotFiles() *wrapperspb.BoolValue {
	if x != nil {
		return x.RuntimeIgnoreDotFiles
	}
	return nil
}

func (x *Settings) GetRuntimeWatchRoot() *wrapperspb.BoolValue {
	if x != nil {
		return x.RuntimeWatchRoot
	}
	return nil
}

func (x *Settings) GetExpirationJitterMaxSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExpirationJitterMaxSeconds
	}
	return nil
}

func (x *Settings) GetLocalCacheSizeInBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.LocalCacheSizeInBytes
	}
	return nil
}

func (x *Settings) GetNearLimitRatio() *wrapperspb.FloatValue {
	if x != nil {
		return x.NearLimitRatio
	}
	return nil
}

func (x *Settings) GetCacheKeyPrefix() *wrapperspb.StringValue {
	if x != nil {
		return x.CacheKeyPrefix
	}
	return nil
}

func (x *Settings) GetBackendType() *wrapperspb.StringValue {
	if x != nil {
		return x.BackendType
	}
	return nil
}

func (x *Settings) GetRateLimitResponseHeadersEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.RateLimitResponseHeadersEnabled
	}
	return nil
}

func (x *Settings) GetHeaderRatelimitLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.HeaderRatelimitLimit
	}
	return nil
}

func (x *Settings) GetHeaderRatelimitRemaining() *wrapperspb.StringValue {
	if x != nil {
		return x.HeaderRatelimitRemaining
	}
	return nil
}

func (x *Settings) GetHeaderRatelimitReset() *wrapperspb.StringValue {
	if x != nil {
		return x.HeaderRatelimitReset
	}
	return nil
}

func (x *Settings) GetRedisSocketType() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisSocketType
	}
	return nil
}

func (x *Settings) GetRedisType() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisType
	}
	return nil
}

func (x *Settings) GetRedisUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisUrl
	}
	return nil
}

func (x *Settings) GetRedisPoolSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RedisPoolSize
	}
	return nil
}

func (x *Settings) GetRedisAuth() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisAuth
	}
	return nil
}

func (x *Settings) GetRedisTls() *wrapperspb.BoolValue {
	if x != nil {
		return x.RedisTls
	}
	return nil
}

func (x *Settings) GetRedisPipelineWindow() *durationpb.Duration {
	if x != nil {
		return x.RedisPipelineWindow
	}
	return nil
}

func (x *Settings) GetRedisPipelineLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RedisPipelineLimit
	}
	return nil
}

func (x *Settings) GetRedisPerSecond() *wrapperspb.BoolValue {
	if x != nil {
		return x.RedisPerSecond
	}
	return nil
}

func (x *Settings) GetRedisPerSecondSocketType() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisPerSecondSocketType
	}
	return nil
}

func (x *Settings) GetRedisPerSecondType() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisPerSecondType
	}
	return nil
}

func (x *Settings) GetRedisPerSecondUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisPerSecondUrl
	}
	return nil
}

func (x *Settings) GetRedisPerSecondPoolSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RedisPerSecondPoolSize
	}
	return nil
}

func (x *Settings) GetRedisPerSecondAuth() *wrapperspb.StringValue {
	if x != nil {
		return x.RedisPerSecondAuth
	}
	return nil
}

func (x *Settings) GetRedisPerSecondTls() *wrapperspb.BoolValue {
	if x != nil {
		return x.RedisPerSecondTls
	}
	return nil
}

func (x *Settings) GetRedisPerSecondPipelineWindow() *durationpb.Duration {
	if x != nil {
		return x.RedisPerSecondPipelineWindow
	}
	return nil
}

func (x *Settings) GetRedisPerSecondPipelineLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RedisPerSecondPipelineLimit
	}
	return nil
}

func (x *Settings) GetRedisHealthCheckActiveConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.RedisHealthCheckActiveConnection
	}
	return nil
}

func (x *Settings) GetMemcacheHostPort() []string {
	if x != nil {
		return x.MemcacheHostPort
	}
	return nil
}

func (x *Settings) GetMemcacheMaxIdleConns() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MemcacheMaxIdleConns
	}
	return nil
}

func (x *Settings) GetMemcacheSrv() *wrapperspb.StringValue {
	if x != nil {
		return x.MemcacheSrv
	}
	return nil
}

func (x *Settings) GetMemcacheSrvRefresh() *durationpb.Duration {
	if x != nil {
		return x.MemcacheSrvRefresh
	}
	return nil
}

func (x *Settings) GetGlobalShadownMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.GlobalShadownMode
	}
	return nil
}

var File_settings_v1_settings_proto protoreflect.FileDescriptor

var file_settings_v1_settings_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x1d, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x70,
	0x63, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x17, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x67, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x1d,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19,
	0x67, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x4f, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x53, 0x0a, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x5e, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x56, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x6e, 0x65, 0x61, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x6e, 0x65, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x46, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x23, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1f, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x1a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x52, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x54, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x1c, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x6c, 0x73, 0x12,
	0x61, 0x0a, 0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6a, 0x0a, 0x24, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x53, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x72, 0x76, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x72, 0x76, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x72, 0x76, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xb0, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x6f, 0x2f, 0x72, 0x75, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_settings_v1_settings_proto_rawDescOnce sync.Once
	file_settings_v1_settings_proto_rawDescData = file_settings_v1_settings_proto_rawDesc
)

func file_settings_v1_settings_proto_rawDescGZIP() []byte {
	file_settings_v1_settings_proto_rawDescOnce.Do(func() {
		file_settings_v1_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_settings_v1_settings_proto_rawDescData)
	})
	return file_settings_v1_settings_proto_rawDescData
}

var file_settings_v1_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_settings_v1_settings_proto_goTypes = []interface{}{
	(*Settings)(nil),               // 0: settings.v1.Settings
	nil,                            // 1: settings.v1.Settings.ExtraTagsEntry
	(*wrapperspb.StringValue)(nil), // 2: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil), // 3: google.protobuf.UInt32Value
	(*durationpb.Duration)(nil),    // 4: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),   // 5: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),  // 6: google.protobuf.Int64Value
	(*wrapperspb.FloatValue)(nil),  // 7: google.protobuf.FloatValue
}
var file_settings_v1_settings_proto_depIdxs = []int32{
	2,  // 0: settings.v1.Settings.host:type_name -> google.protobuf.StringValue
	3,  // 1: settings.v1.Settings.port:type_name -> google.protobuf.UInt32Value
	2,  // 2: settings.v1.Settings.grpc_host:type_name -> google.protobuf.StringValue
	3,  // 3: settings.v1.Settings.grpc_port:type_name -> google.protobuf.UInt32Value
	2,  // 4: settings.v1.Settings.debug_host:type_name -> google.protobuf.StringValue
	3,  // 5: settings.v1.Settings.debug_port:type_name -> google.protobuf.UInt32Value
	4,  // 6: settings.v1.Settings.grpc_max_connection_age:type_name -> google.protobuf.Duration
	4,  // 7: settings.v1.Settings.grpc_max_connection_age_grace:type_name -> google.protobuf.Duration
	2,  // 8: settings.v1.Settings.log_level:type_name -> google.protobuf.StringValue
	2,  // 9: settings.v1.Settings.log_format:type_name -> google.protobuf.StringValue
	5,  // 10: settings.v1.Settings.use_statsd:type_name -> google.protobuf.BoolValue
	2,  // 11: settings.v1.Settings.statsd_host:type_name -> google.protobuf.StringValue
	3,  // 12: settings.v1.Settings.statsd_port:type_name -> google.protobuf.UInt32Value
	1,  // 13: settings.v1.Settings.extra_tags:type_name -> settings.v1.Settings.ExtraTagsEntry
	2,  // 14: settings.v1.Settings.runtime_path:type_name -> google.protobuf.StringValue
	2,  // 15: settings.v1.Settings.runtime_subdirectory:type_name -> google.protobuf.StringValue
	5,  // 16: settings.v1.Settings.runtime_ignore_dot_files:type_name -> google.protobuf.BoolValue
	5,  // 17: settings.v1.Settings.runtime_watch_root:type_name -> google.protobuf.BoolValue
	6,  // 18: settings.v1.Settings.expiration_jitter_max_seconds:type_name -> google.protobuf.Int64Value
	3,  // 19: settings.v1.Settings.local_cache_size_in_bytes:type_name -> google.protobuf.UInt32Value
	7,  // 20: settings.v1.Settings.near_limit_ratio:type_name -> google.protobuf.FloatValue
	2,  // 21: settings.v1.Settings.cache_key_prefix:type_name -> google.protobuf.StringValue
	2,  // 22: settings.v1.Settings.backend_type:type_name -> google.protobuf.StringValue
	5,  // 23: settings.v1.Settings.rate_limit_response_headers_enabled:type_name -> google.protobuf.BoolValue
	2,  // 24: settings.v1.Settings.header_ratelimit_limit:type_name -> google.protobuf.StringValue
	2,  // 25: settings.v1.Settings.header_ratelimit_remaining:type_name -> google.protobuf.StringValue
	2,  // 26: settings.v1.Settings.header_ratelimit_reset:type_name -> google.protobuf.StringValue
	2,  // 27: settings.v1.Settings.redis_socket_type:type_name -> google.protobuf.StringValue
	2,  // 28: settings.v1.Settings.redis_type:type_name -> google.protobuf.StringValue
	2,  // 29: settings.v1.Settings.redis_url:type_name -> google.protobuf.StringValue
	3,  // 30: settings.v1.Settings.redis_pool_size:type_name -> google.protobuf.UInt32Value
	2,  // 31: settings.v1.Settings.redis_auth:type_name -> google.protobuf.StringValue
	5,  // 32: settings.v1.Settings.redis_tls:type_name -> google.protobuf.BoolValue
	4,  // 33: settings.v1.Settings.redis_pipeline_window:type_name -> google.protobuf.Duration
	3,  // 34: settings.v1.Settings.redis_pipeline_limit:type_name -> google.protobuf.UInt32Value
	5,  // 35: settings.v1.Settings.redis_per_second:type_name -> google.protobuf.BoolValue
	2,  // 36: settings.v1.Settings.redis_per_second_socket_type:type_name -> google.protobuf.StringValue
	2,  // 37: settings.v1.Settings.redis_per_second_type:type_name -> google.protobuf.StringValue
	2,  // 38: settings.v1.Settings.redis_per_second_url:type_name -> google.protobuf.StringValue
	3,  // 39: settings.v1.Settings.redis_per_second_pool_size:type_name -> google.protobuf.UInt32Value
	2,  // 40: settings.v1.Settings.redis_per_second_auth:type_name -> google.protobuf.StringValue
	5,  // 41: settings.v1.Settings.redis_per_second_tls:type_name -> google.protobuf.BoolValue
	4,  // 42: settings.v1.Settings.redis_per_second_pipeline_window:type_name -> google.protobuf.Duration
	3,  // 43: settings.v1.Settings.redis_per_second_pipeline_limit:type_name -> google.protobuf.UInt32Value
	5,  // 44: settings.v1.Settings.redis_health_check_active_connection:type_name -> google.protobuf.BoolValue
	3,  // 45: settings.v1.Settings.memcache_max_idle_conns:type_name -> google.protobuf.UInt32Value
	2,  // 46: settings.v1.Settings.memcache_srv:type_name -> google.protobuf.StringValue
	4,  // 47: settings.v1.Settings.memcache_srv_refresh:type_name -> google.protobuf.Duration
	5,  // 48: settings.v1.Settings.global_shadown_mode:type_name -> google.protobuf.BoolValue
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_settings_v1_settings_proto_init() }
func file_settings_v1_settings_proto_init() {
	if File_settings_v1_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_settings_v1_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_settings_v1_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_settings_v1_settings_proto_goTypes,
		DependencyIndexes: file_settings_v1_settings_proto_depIdxs,
		MessageInfos:      file_settings_v1_settings_proto_msgTypes,
	}.Build()
	File_settings_v1_settings_proto = out.File
	file_settings_v1_settings_proto_rawDesc = nil
	file_settings_v1_settings_proto_goTypes = nil
	file_settings_v1_settings_proto_depIdxs = nil
}
